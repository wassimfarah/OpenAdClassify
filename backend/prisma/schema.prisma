generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
  MODERATOR
}

enum AdStatus {
  ACTIVE
  INACTIVE
  SOLD
  EXPIRED
}

enum AdType {
  SELLING
  SEEKING
  RENT
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
}

model User {
id             Int      @id @default(autoincrement())
  username       String    @unique
  email          String    @unique
  phoneNumber    String    @unique
  password       String
  profilePicture String?   // Optional field for profile picture URL
  role           UserRole  @default(USER)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  ads            Ad[]      // Define the reverse relation here
}

model Ad {
  id              String     @id @default(uuid())
  title           String
  description     String
  price           Float
  minimumPrice    Float
  type            AdType
  acceptOffer     Boolean
  acceptMessages  Boolean
  acceptExchange  Boolean
  location        String
  adStatus        AdStatus
  category        Category  @relation(fields: [categoryId], references: [id])
  categoryId      String
  subcategory     Subcategory @relation(fields: [subcategoryId], references: [id])
  subcategoryId   String
  createdBy       User      @relation(fields: [createdById], references: [id])
  createdById     Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  media           Media[]
  numberOfImpressions Int @default(0)
}

model Category {
  id              String   @id @default(uuid())
  name            String   @unique
  ads             Ad[]
  subcategories   Subcategory[]
}

model Subcategory {
  id              String   @id @default(uuid())
  name            String
  ads             Ad[]
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String
}

model Media {
  id        String     @id @default(uuid())
  url       String     // URL or path to the media file
  type      MediaType
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  ad        Ad?        @relation(fields: [adId], references: [id])
  adId      String?
}
